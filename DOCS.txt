The C SDK follows the same pattern as other client SDKs with a few
adaptations for the C language. No garbage collection here.

#include "ldapi.h"
You want this header. Do not include or use anything from ldinternal.h.


-- CONFIGURATION --

LDConfig *LDConfigNew(const char *authkey)
Allocate a new default config. It may be modified at this time.
authkey is required.
Use LDSetString to modify string fields.

LDUser *LDUserNew(const char *key)
Allocate a new user. It may be modified. key is required.
Use LDSetString to modify string fields.

bool LDUserSetCustomAttributesJSON(LDUser *user, const char *jstring)
Helper function to set custom attributes for the user. The custom field
may be build programmatically using the LDNode functions (see below), or
may be set all at once with a json string.

LDClient *LDClientInit(LDConfig *config, LDUser *user)
Initialize the client with the config and user. After this call, the config
and user must be considered immutable. May be called more than once to change
config, in which case the old config is freed. There is only ever one LDClient.
(Always inits and returns the same value.)

void LDClientClose(LDClient *)
Close the client, free resources, and generally shut down.

void LDSetString(char **field, const char *value)
A helper function to set string fields, allocating, freeing, and copying
memory as needed.


-- BASIC CLIENT FUNCTIONS --

LDClient *LDClientGet(void)
Get the client. There's only one.

bool LDBoolVariation(LDClient *, const char *name , bool default)
int LDIntVariation(LDClient *, const char *name, int default)
double LDDoubleVariation(LDClient *, const char *name, double default)
Ask for a bool, int, or double flag, respectively. Return the default if not
found.

char *LDStringVariationAlloc(LDClient *, const char *name, const char *def)
char *LDStringVariation(LDClient *, const char *name, const char *default,
    char *buffer, size_t size)
Ask for a string flag. The first version allocates memory on every call. This
must then be freed with LDFree.
To avoid allocations, the second function fills a caller provided buffer. Up to
size bytes will be copied into buffer, truncating if necessary.
Both functions return a pointer.

LDNode *LDJSONVariation(LDClient *client, const char *name, LDNode *default)
Ask for a JSON variation, returned as a parsed tree of LDNodes.
The node returned is an internal data structure of the client. After examination,
it must be released by calling LDJSONRelease() which will unlock the client.
See also LDNodeLookup.

void LDJSONRelease(LDNode *hash)
Release a JSON node. Only the node returned by LDJSONVariation must be
released. Sub-nodes looked up via LDNodeLookup should not be released.

LDNode *LDNodeLookup(LDNode *hash, const char *key)
Lookup a node in a hash map.

void LDFree(void *)
Free a string.

typedef void (*LDlistenerfn)(const char *name, int update);
bool LDClientRegisterFeatureFlagListener(LDClient *client, const char *name, LDlistenerfn)
bool LDClientUnregisterFeatureFlagListener(LDClient *client, const char *name, LDlistenerfn)
Register and unregister callbacks when features change.
The name argument indicates the changed value.
The update argument is 0 for new or updated and 1 for deleted.

A C++ interface is also available; see below.

-- MORE CLIENT FUNCTIONS --

bool LDClientIsInitialized(LDClient *)
Returns true if the client has received feature flags from the server.

char *LDClientSaveFlags(LDClient *)
Return a string representing internal feature flag state.
Free with LDFree().

void LDClientRestoreFlags(LDClient *, const char *)
Restore previously saved feature flags.

void LDClientIdentify(LDClient *, LDUser *)
Update the client with a new user. The old user is freed.

void LDClientFlush(LDClient *client)
Send any pending events to the server. They will normally be flushed after a
timeout, but may also be flushed manually.

void LDClientSetOffline(LDClient *)
Make the client operate in offline mode. No network traffic.

void LDClientSetOnline(LDClient *)
Return the client to online mode.

bool LDClientIsOffline(void)
Returns the offline status of the client.

void LDSetClientStatusCallback(void (callback)(int status))
Set a callback function for client status changes. These are major
status changes only, not updates to the feature map.
Current status code:
0 - Offline. The client has been shut down, likely due to a permission failure.
1 - Ready. The client has received an initial feature map from the server
    and is ready to proceed.

-- NODE INTERFACE --

The LD client uses JSON to communicate. In places where it is exposed to
the application, it is represented as LDNode structures. Both arrays and
objects (hash tables) are supported.

LDNode *LDNodeCreateHash(void);
Create a new empty hash.
(Implementation note: empty hash is a NULL pointer, not indicative of failure).

LDNode * LDNodeAddBool(LDNode **hash, const char *key, bool b);
LDNode * LDNodeAddNumber(LDNode **hash, const char *key, double n);
LDNode * LDNodeAddString(LDNode **hash, const char *key, const char *s);
LDNode * LDNodeAddMap(LDNode **hash, const char *key, LDNode *m);
Add a new node to the hash table.
Memory ownership: The string s will be duplicated internally. The map m
is _not_ duplicated. It will be owned by the contianing hash.

LDNode *LDNodeLookup(LDNode *hash, const char *key);
Find a node in a hash. See below for structure.

void LDNodeFree(LDNode **hash);
Free a map and all internal memory.

In addition to hash tables, arrays are also supported.

LDNode *LDNodeCreateArray();
Create an empty array.

LDNode * LDNodeAppendBool(LDNode **array, bool b);
LDNode * LDNodeAppendNumber(LDNode **array, double n);
LDNode * LDNodeAppendString(LDNode **array, const char *s);
Add a bool, number, or string to an array.

LDNode *LDNodeIndex(LDNode *array, unsigned int idx);
Retrieve the element at index idx.

unsigned int LDNodeCount(LDNode *hash)
Return the number of elements in a hash or array.

A node will have a type, one of string, number, bool, map (hash), or array.
The corresponding union field, s, n, b, m, or a will be set.

typedef enum {
    LDNodeNone = 0,
    LDNodeString,
    LDNodeNumber,
    LDNodeBool,
    LDNodeMap,
    LDNodeArray,
} LDNodeType;

typedef struct {
    char *key;
    LDNodeType type;
    union {
        bool b;
        char *s;
        double n;
        LDNode *m;
        LDNode *a;
    };
} LDNode;

-- STORE INTERFACE --

The client library supports persisting data between sessions or when internet
connectivity is intermittent. This is exposed to the application via the
LD_store interface which consists of four functions.

void
LD_store_setfns(void *context, LD_store_opener, LD_store_stringwriter,
    LD_store_stringreader, LD_store_closer)
LD_store_setfns sets the functions to be used. The opener and closer
are required, but reader and writer may optionally be NULL. The
provided opaque context is passed to each open call.

typedef void *(*LD_store_opener)(void *context, const char *name,
    const char *mode, size_t predictedlen);
The opener function should return a handle to an open file.
context is as set above. name identifies the data requested. mode
is an fopen style string, "r" for reading and "w" for writing.
predictedlen is the expected length of data to be read or written.
It returns a handle for further operations, or NULL for failure.

typedef bool (*LD_store_stringwriter)(void *handle, const char *data);
Should write the data to the handle. Returns true for success.

typedef const char *(*LD_store_stringreader)(void *handle);
Read a string from the handle. Returns NULL on failure.
Memory is to be managed by the handle.

typedef void (*LD_store_closer)(void *handle);
Close a handle and free resources (e.g. the string returned by stringreader).

A simple set of functions that operate on text files is provided:
void *LD_store_fileopen(void *, const char *name, const char *mode, size_t len);
bool LD_store_filewrite(void *h, const char *data);
const char *LD_store_fileread(void *h);
void LD_store_fileclose(void *h);

-- MISC --

void LDSetLogFunction(int userlevel, void (userlogfn)(const char *))
Set the log function and log level. Increasing log levels result in increasing output.

-- C++ INTERFACE --

A C++ interface to LDClient is also available. Other C functions remain available.

class LDClient {
        static LDClient *Get(void);
        Return the LDClient singleton.

        static LDClient *Init(LDConfig *, LDUser *);
        Initialize the client.

        bool boolVariation(const std::string &, bool);
        int intVariation(const std::string &, int);
        std::string stringVariation(const std::string &, const std::string &);
        char *stringVariation(const std::string &, const std::string &, char *, size_t);

        Functions to ask for variations.


        LDNode *JSONVariation(const std::string &, LDNode *);
        Request a JSON variation. It must be released.

        void setOffline();
        void setOnline();
        bool isOffline();

        std::string saveFlags();
        void restoreFlags(const std::string &);

        void flush(void);
        void close(void);
}

In C++, LDNode has the following member functions.

class LDNode {
    LDNode *lookup(const std::string &key);
    Find a subnode.

    void release(void);
    Release a node, as returned from LDClient::JSONVariation.
}